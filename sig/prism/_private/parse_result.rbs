module Prism
  class Source
    private

    def find_line: (Integer) -> Integer
  end

  class Location
    private

    def source!: () -> Source
  end

  class ParseResult
    def attach_comments!: () -> void
    def mark_newlines!: () -> untyped

    class Comments
      interface _Target
        def start_offset: () -> Integer
        def end_offset: () -> Integer
        def encloses?: (comment) -> bool
        def <<: (comment) -> void
      end

      class NodeTarget
        include _Target

        attr_reader node: Prism::node

        def initialize: (Prism::node) -> void
      end

      class LocationTarget
        include _Target

        attr_reader location: Location

        def initialize: (Location) -> void
      end

      attr_reader parse_result: ParseResult

      def initialize: (ParseResult) -> void
      def attach!: () -> void

      private

      def nearest_targets: (Prism::node, comment) -> (untyped | ::Array[untyped])
    end

    class Errors
      attr_reader parse_result: ParseResult

      def initialize: (ParseResult parse_result) -> void
      def format: () -> String
    end

    class Newlines < Visitor
      @newline_marked: Array[bool]

      # Create a new Newlines visitor with the given newline offsets.
      def initialize: (Array[bool] newline_marked) -> void

      def visit_block_node: (BlockNode node) -> void
      def visit_lambda_node: (LambdaNode node) -> void
      def visit_if_node: (IfNode node) -> void
      def visit_unless_node: (UnlessNode node) -> void
      def visit_statements_node: (StatementsNode node) -> void
    end
  end
end
