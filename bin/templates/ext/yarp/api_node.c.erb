#include "extension.h"

extern VALUE rb_cYARP;
extern VALUE rb_cYARPToken;
extern VALUE rb_cYARPLocation;

static VALUE
location_new(yp_parser_t *parser, const char *start, const char *end) {
    VALUE argv[] = { LONG2FIX(start - parser->start), LONG2FIX(end - start) };
    return rb_class_new_instance(2, argv, rb_cYARPLocation);
}

static VALUE
yp_string_new(yp_string_t *string, rb_encoding *encoding) {
    return rb_enc_str_new(yp_string_source(string), yp_string_length(string), encoding);
}

VALUE
yp_token_new(yp_parser_t *parser, yp_token_t *token, rb_encoding *encoding) {
    VALUE argv[] = {
        ID2SYM(rb_intern(yp_token_type_to_str(token->type))),
        rb_enc_str_new(token->start, token->end - token->start, encoding),
        LONG2FIX(token->start - parser->start),
        LONG2FIX(token->end - token->start)
    };

    return rb_class_new_instance(4, argv, rb_cYARPToken);
}

VALUE
yp_node_new(yp_parser_t *parser, yp_node_t *node, rb_encoding *encoding, ID *constants) {
    switch (node->type) {
        <%- nodes.each do |node| -%>
        case <%= node.type %>: {
            <%- if node.params.any? -%>
            yp_<%= node.human %>_t *cast = (yp_<%= node.human %>_t *) node;
            <%- end -%>
            VALUE argv[<%= node.params.length + 2 %>];
            <%- node.params.each_with_index do |param, index| -%>

            // <%= param.name %>
            <%- case param -%>
            <%- when NodeParam -%>
            argv[<%= index %>] = yp_node_new(parser, (yp_node_t *) cast-><%= param.name %>, encoding, constants);
            <%- when OptionalNodeParam -%>
            argv[<%= index %>] = cast-><%= param.name %> == NULL ? Qnil : yp_node_new(parser, (yp_node_t *) cast-><%= param.name %>, encoding, constants);
            <%- when NodeListParam -%>
            argv[<%= index %>] = rb_ary_new();
            for (size_t index = 0; index < cast-><%= param.name %>.size; index++) {
                rb_ary_push(argv[<%= index %>], yp_node_new(parser, cast-><%= param.name %>.nodes[index], encoding, constants));
            }
            <%- when StringParam -%>
            argv[<%= index %>] = yp_string_new(&cast-><%= param.name %>, encoding);
            <%- when TokenParam -%>
            argv[<%= index %>] = yp_token_new(parser, &cast-><%= param.name %>, encoding);
            <%- when OptionalTokenParam -%>
            argv[<%= index %>] = cast-><%= param.name %>.type == YP_TOKEN_NOT_PROVIDED ? Qnil : yp_token_new(parser, &cast-><%= param.name %>, encoding);
            <%- when TokenListParam -%>
            argv[<%= index %>] = rb_ary_new();
            for (size_t index = 0; index < cast-><%= param.name %>.size; index++) {
                rb_ary_push(argv[<%= index %>], yp_token_new(parser, &cast-><%= param.name %>.tokens[index], encoding));
            }
            <%- when ConstantParam -%>
            argv[<%= index %>] = rb_id2sym(constants[cast-><%= param.name %> - 1]);
            <%- when ConstantListParam -%>
            argv[<%= index %>] = rb_ary_new();
            for (size_t index = 0; index < cast-><%= param.name %>.size; index++) {
                rb_ary_push(argv[<%= index %>], rb_id2sym(constants[cast-><%= param.name %>.ids[index] - 1]));
            }
            <%- when LocationParam -%>
            argv[<%= index %>] = location_new(parser, cast-><%= param.name %>.start, cast-><%= param.name %>.end);
            <%- when OptionalLocationParam -%>
            argv[<%= index %>] = cast-><%= param.name %>.start == NULL ? Qnil : location_new(parser, cast-><%= param.name %>.start, cast-><%= param.name %>.end);
            <%- when UInt32Param -%>
            argv[<%= index %>] = ULONG2NUM(cast-><%= param.name %>);
            <%- else -%>
            <%- raise -%>
            <%- end -%>
            <%- end -%>

            // location
            argv[<%= node.params.length %>] = LONG2FIX(node->location.start - parser->start);
            argv[<%= node.params.length + 1 %>] = LONG2FIX(node->location.end - node->location.start);

            return rb_class_new_instance(<%= node.params.length + 2 %>, argv, rb_const_get_at(rb_cYARP, rb_intern("<%= node.name %>")));
        }
        <%- end -%>
        default:
            rb_raise(rb_eRuntimeError, "unknown node type: %d", node->type);
    }
}

VALUE yp_ast_new(yp_parser_t *parser, yp_node_t *node, rb_encoding *encoding) {
    ID constants[parser->constant_pool.size];

    for (size_t index = 0; index < parser->constant_pool.capacity; index++) {
        yp_constant_t constant = parser->constant_pool.constants[index];

        if (constant.id != 0) {
            constants[constant.id - 1] = rb_intern3(constant.start, constant.length, encoding);
        }
    }

    return yp_node_new(parser, node, encoding, constants);
}
