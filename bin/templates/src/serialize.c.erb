/******************************************************************************/
/* This file is generated by the bin/template script and should not be        */
/* modified manually.                                                         */
/******************************************************************************/

#include "yarp/ast.h"
#include "yarp/parser.h"
#include "yarp/util/yp_buffer.h"

static void
serialize_token(yp_parser_t *parser, yp_token_t *token, yp_buffer_t *buffer) {
  assert(token->start);
  assert(token->end);

  yp_buffer_append_u8(buffer, token->type);
  yp_buffer_append_u32(buffer, token->start - parser->start);
  yp_buffer_append_u32(buffer, token->end - parser->start);
}

static void
serialize_location(yp_parser_t *parser, yp_location_t *location, yp_buffer_t *buffer) {
  assert(location->start);
  assert(location->end);

  yp_buffer_append_u32(buffer, location->start - parser->start);
  yp_buffer_append_u32(buffer, location->end - parser->start);
}

void
yp_serialize_node(yp_parser_t *parser, yp_node_t *node, yp_buffer_t *buffer) {
  yp_buffer_append_u8(buffer, node->type);

  size_t offset = buffer->length;
  yp_buffer_append_u32(buffer, 0); /* Updated below */

  assert(node->location.start);
  assert(node->location.end);

  yp_buffer_append_u32(buffer, node->location.start - parser->start);
  yp_buffer_append_u32(buffer, node->location.end - parser->start);

  switch (node->type) {
    <%- nodes.each do |node| -%>
    case <%= node.type %>: {
      <%- node.params.each do |param| -%>
      <%- case param -%>
      <%- when NodeParam -%>
      yp_serialize_node(parser, node->as.<%= node.human %>.<%= param.name %>, buffer);
      <%- when OptionalNodeParam -%>
      if (node->as.<%= node.human %>.<%= param.name %> == NULL) {
        yp_buffer_append_u8(buffer, 0);
      } else {
        yp_serialize_node(parser, node->as.<%= node.human %>.<%= param.name %>, buffer);
      }
      <%- when StringParam -%>
      uint32_t <%= param.name %>_length = yp_string_length(&node->as.<%= node.human %>.<%= param.name %>);
      yp_buffer_append_u32(buffer, <%= param.name %>_length);
      yp_buffer_append_str(buffer, yp_string_source(&node->as.<%= node.human %>.<%= param.name %>), <%= param.name %>_length);
      <%- when NodeListParam -%>
      uint32_t <%= param.name %>_size = node->as.<%= node.human %>.<%= param.name %>.size;
      yp_buffer_append_u32(buffer, <%= param.name %>_size);
      for (uint32_t index = 0; index < <%= param.name %>_size; index++) {
        yp_serialize_node(parser, node->as.<%= node.human %>.<%= param.name %>.nodes[index], buffer);
      }
      <%- when TokenParam -%>
      serialize_token(parser, &node->as.<%= node.human %>.<%= param.name %>, buffer);
      <%- when OptionalTokenParam -%>
      if (node->as.<%= node.human %>.<%= param.name %>.type == YP_TOKEN_NOT_PROVIDED) {
        yp_buffer_append_u8(buffer, 0);
      } else {
        serialize_token(parser, &node->as.<%= node.human %>.<%= param.name %>, buffer);
      }
      <%- when TokenListParam -%>
      uint32_t <%= param.name %>_size = node->as.<%= node.human %>.<%= param.name %>.size;
      yp_buffer_append_u32(buffer, <%= param.name %>_size);
      for (uint32_t index = 0; index < <%= param.name %>_size; index++) {
        serialize_token(parser, &node->as.<%= node.human %>.<%= param.name %>.tokens[index], buffer);
      }
      <%- when LocationParam -%>
      serialize_location(parser, &node->as.<%= node.human %>.<%= param.name %>, buffer);
      <%- when OptionalLocationParam -%>
      if (node->as.<%= node.human %>.<%= param.name %>.start == NULL) {
        yp_buffer_append_u8(buffer, 0);
      } else {
        yp_buffer_append_u8(buffer, 1);
        serialize_location(parser, &node->as.<%= node.human %>.<%= param.name %>, buffer);
      }
      <%- when IntegerParam -%>
      yp_buffer_append_int(buffer, node->as.<%= node.human %>.<%= param.name %>);
      <%- else -%>
      <%- raise -%>
      <%- end -%>
      <%- end -%>
      break;
    }
    <%- end -%>
  }

  uint32_t length = buffer->length - offset - sizeof(uint32_t);
  memcpy(buffer->value + offset, &length, sizeof(uint32_t));
}
