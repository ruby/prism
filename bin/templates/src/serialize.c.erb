#include "yarp/ast.h"
#include "yarp/parser.h"
#include "yarp/util/yp_buffer.h"
#include "yarp/util/yp_conversion.h"

#include <stdio.h>

static void
serialize_token(yp_parser_t *parser, yp_token_t *token, yp_buffer_t *buffer) {
    assert(token->start);
    assert(token->end);
    assert(token->start <= token->end);

    yp_buffer_append_u8(buffer, token->type);
    yp_buffer_append_u32(buffer, yp_long_to_u32(token->start - parser->start));
    yp_buffer_append_u32(buffer, yp_long_to_u32(token->end - token->start));
}

static void
serialize_location(yp_parser_t *parser, yp_location_t *location, yp_buffer_t *buffer) {
    assert(location->start);
    assert(location->end);
    assert(location->start <= location->end);

    yp_buffer_append_u32(buffer, yp_long_to_u32(location->start - parser->start));
    yp_buffer_append_u32(buffer, yp_long_to_u32(location->end - location->start));
}

void
yp_serialize_node(yp_parser_t *parser, yp_node_t *node, yp_buffer_t *buffer) {
    yp_buffer_append_u8(buffer, node->type);

    size_t offset = buffer->length;

    serialize_location(parser, &node->location, buffer);

    switch (node->type) {
        <%- nodes.each do |node| -%>
        case <%= node.type %>: {
        <%- if node.needs_serialized_length? -%>
                // serialize length
                // encoding of location u32s make us need to save this offset.
                size_t length_offset = buffer->length;
                yp_buffer_append_str(buffer, "\0\0\0\0", 4); /* consume 4 bytes, updated below */
            <%- end -%>
            <%- node.params.each do |param| -%>
            <%- case param -%>
            <%- when NodeParam -%>
            yp_serialize_node(parser, (yp_node_t *)((yp_<%= node.human %>_t *)node)-><%= param.name %>, buffer);
            <%- when OptionalNodeParam -%>
            if (((yp_<%= node.human %>_t *)node)-><%= param.name %> == NULL) {
                yp_buffer_append_u8(buffer, 0);
            } else {
                yp_serialize_node(parser, (yp_node_t *)((yp_<%= node.human %>_t *)node)-><%= param.name %>, buffer);
            }
            <%- when StringParam -%>
            uint32_t <%= param.name %>_length = yp_ulong_to_u32(yp_string_length(&((yp_<%= node.human %>_t *)node)-><%= param.name %>));
            yp_buffer_append_u32(buffer, <%= param.name %>_length);
            yp_buffer_append_str(buffer, yp_string_source(&((yp_<%= node.human %>_t *)node)-><%= param.name %>), <%= param.name %>_length);
            <%- when NodeListParam -%>
            uint32_t <%= param.name %>_size = yp_ulong_to_u32(((yp_<%= node.human %>_t *)node)-><%= param.name %>.size);
            yp_buffer_append_u32(buffer, <%= param.name %>_size);
            for (uint32_t index = 0; index < <%= param.name %>_size; index++) {
                yp_serialize_node(parser, (yp_node_t *) ((yp_<%= node.human %>_t *)node)-><%= param.name %>.nodes[index], buffer);
            }
            <%- when TokenParam -%>
            serialize_token(parser, &((yp_<%= node.human %>_t *)node)-><%= param.name %>, buffer);
            <%- when OptionalTokenParam -%>
            if (((yp_<%= node.human %>_t *)node)-><%= param.name %>.type == YP_TOKEN_NOT_PROVIDED) {
                yp_buffer_append_u8(buffer, 0);
            } else {
                serialize_token(parser, &((yp_<%= node.human %>_t *)node)-><%= param.name %>, buffer);
            }
            <%- when TokenListParam -%>
            uint32_t <%= param.name %>_size = yp_ulong_to_u32(((yp_<%= node.human %>_t *)node)-><%= param.name %>.size);
            yp_buffer_append_u32(buffer, <%= param.name %>_size);
            for (uint32_t index = 0; index < <%= param.name %>_size; index++) {
                serialize_token(parser, &((yp_<%= node.human %>_t *)node)-><%= param.name %>.tokens[index], buffer);
            }
            <%- when ConstantParam -%>
            yp_buffer_append_u32(buffer, ((yp_<%= node.human %>_t *)node)-><%= param.name %>);
            <%- when ConstantListParam -%>
            uint32_t <%= param.name %>_size = yp_ulong_to_u32(((yp_<%= node.human %>_t *)node)-><%= param.name %>.size);
            yp_buffer_append_u32(buffer, <%= param.name %>_size);
            for (uint32_t index = 0; index < <%= param.name %>_size; index++) {
                yp_buffer_append_u32(buffer, ((yp_<%= node.human %>_t *)node)-><%= param.name %>.ids[index]);
            }
            <%- when LocationParam -%>
            serialize_location(parser, &((yp_<%= node.human %>_t *)node)-><%= param.name %>, buffer);
            <%- when OptionalLocationParam -%>
            if (((yp_<%= node.human %>_t *)node)-><%= param.name %>.start == NULL) {
                yp_buffer_append_u8(buffer, 0);
            } else {
                yp_buffer_append_u8(buffer, 1);
                serialize_location(parser, &((yp_<%= node.human %>_t *)node)-><%= param.name %>, buffer);
            }
            <%- when UInt32Param -%>
            yp_buffer_append_u32(buffer, ((yp_<%= node.human %>_t *)node)-><%= param.name %>);
            <%- else -%>
            <%- raise -%>
            <%- end -%>
            <%- end -%>
            <%- if node.needs_serialized_length? -%>
                // serialize length
                uint32_t length = yp_ulong_to_u32(buffer->length - offset - sizeof(uint32_t));
                memcpy(buffer->value + length_offset, &length, sizeof(uint32_t));      
            <%- end -%>
            break;
        }
        <%- end -%>
    }
}

void
yp_serialize_content(yp_parser_t *parser, yp_node_t *node, yp_buffer_t *buffer) {
    // Here we're going to leave space for the offset of the constant pool in
    // the buffer.
    size_t offset = buffer->length;
    yp_buffer_append_zeroes(buffer, 4);

    // Next, encode the length of the constant pool.
    yp_buffer_append_u32(buffer, yp_ulong_to_u32(parser->constant_pool.size));

    // Now we're going to serialize the content of the node.
    yp_serialize_node(parser, node, buffer);

    // Now we're going to serialize the offset of the constant pool back where
    // we left space for it.
    uint32_t length = yp_ulong_to_u32(buffer->length);
    memcpy(buffer->value + offset, &length, sizeof(uint32_t));

    // Now we're going to serialize the constant pool.
    offset = buffer->length;
    yp_buffer_append_zeroes(buffer, parser->constant_pool.size * 8);

    yp_constant_t *constant;
    for (size_t index = 0; index < parser->constant_pool.capacity; index++) {
        constant = &parser->constant_pool.constants[index];

        // If we find a constant at this index, serialize it at the correct
        // index in the buffer.
        if (constant->id != 0) {
            size_t buffer_offset = offset + ((constant->id - 1) * 8);
            size_t source_offset = yp_long_to_u32(constant->start - parser->start);

            memcpy(buffer->value + buffer_offset, &source_offset, 4);
            memcpy(buffer->value + buffer_offset + 4, &constant->length, 4);
        }
    }
}
