require "stringio"

module YARP
  module Serialize
    def self.load(source, serialized)
      io = StringIO.new(serialized)
      io.set_encoding(Encoding::BINARY)

      Loader.new(source, serialized, io).load
    end

    class Loader
      attr_reader :source, :io, :encoding

      def initialize(source, serialized, io)
        # TODO: This is wrong, we should be dumping and loading the encoding.
        # For now, we assume that the source is UTF-8.
        @encoding = Encoding::UTF_8
        @source = source.dup.force_encoding(@encoding).freeze
        @serialized = serialized
        @io = io
      end

      def load
        io.read(4) => "YARP"
        io.read(3).unpack("C3") => [0, 4, 0]

        @constant_pool_offset = io.read(4).unpack1("L")
        constant_pool_length = load_varint
        @constant_pool = Array.new(constant_pool_length, nil)

        load_node
      end

      private

      # variable-length integer using https://en.wikipedia.org/wiki/LEB128
      # This is also what protobuf uses: https://protobuf.dev/programming-guides/encoding/#varints
      def load_varint
        n = io.getbyte
        if n < 128
          n
        else
          n -= 128
          shift = 0
          while (b = io.getbyte) >= 128
            n += (b - 128) << (shift += 7)
          end
          n + (b << (shift + 7))
        end
      end

      def load_serialized_length
        io.read(4).unpack1("L")
      end

      def load_token
        type =
          case io.getbyte
          <%- tokens.each_with_index do |token, index| -%>
          when <%= index + 1 %> then :<%= token.name.inspect %>
          <%- end -%>
          end

        start_offset, length = load_varint, load_varint
        range = source.byteslice(start_offset, length)
        Token.new(type, range, start_offset, length)
      end

      def load_optional_node
        if io.getbyte != 0
          io.pos -= 1
          load_node
        end
      end

      def load_optional_token
        if io.getbyte != 0
          io.pos -= 1
          load_token
        end
      end

      def load_string
        io.read(load_varint).force_encoding(encoding)
      end

      def load_location
        Location.new(load_varint, load_varint)
      end

      def load_optional_location
        load_location if io.getbyte != 0
      end

      def load_constant
        index = load_varint - 1
        constant = @constant_pool[index]
        unless constant
          offset = @constant_pool_offset + index * 8
          start = @serialized[offset, 4].unpack1('L')
          length = @serialized[offset + 4, 4].unpack1('L')
          constant = source.byteslice(start, length).to_sym
          @constant_pool[index] = constant
        end
        constant
      end

      def load_node
        type = io.getbyte
        start_offset, length = load_varint, load_varint

        case type
        <%- nodes.each_with_index do |node, index| -%>
        when <%= index + 1 %> then
          <%- if node.needs_serialized_length? -%>
          load_serialized_length
          <%- end -%>
          <%= node.name %>.new(<%= (node.params.map { |param|
            case param
            when NodeParam then "load_node"
            when OptionalNodeParam then "load_optional_node"
            when StringParam then "load_string"
            when NodeListParam then "Array.new(load_varint) { load_node }"
            when TokenParam then "load_token"
            when TokenListParam then "Array.new(load_varint) { load_token }"
            when ConstantParam then "load_constant"
            when ConstantListParam then "Array.new(load_varint) { load_constant }"
            when OptionalTokenParam then "load_optional_token"
            when LocationParam then "load_location"
            when OptionalLocationParam then "load_optional_location"
            when UInt32Param then "load_varint"
            else raise
            end
          } + ["start_offset", "length"]).join(", ") -%>)
          <%- end -%>
        end
      end
    end
  end
end
