require "stringio"

module YARP
  module Serialize
    def self.load(input, serialized)
      io = StringIO.new(serialized)
      io.set_encoding(Encoding::BINARY)

      Loader.new(input, serialized, io).load
    end

    class Loader
      attr_reader :encoding, :input, :serialized, :io
      attr_reader :constant_pool_offset, :constant_pool, :source

      def initialize(input, serialized, io)
        @encoding = Encoding::UTF_8

        @input = input.dup
        @serialized = serialized
        @io = io

        @constant_pool_offset = nil
        @constant_pool = nil

        offsets = [0]
        input.b.scan("\n") { offsets << $~.end(0) }
        @source = Source.new(input, offsets)
      end

      def load
        io.read(4) => "YARP"
        io.read(3).unpack("C3") => [0, 4, 0]

        @encoding = Encoding.find(io.read(load_varint))
        @input = input.force_encoding(@encoding).freeze

        @constant_pool_offset = io.read(4).unpack1("L")
        @constant_pool = Array.new(load_varint, nil)

        load_node
      end

      private

      # variable-length integer using https://en.wikipedia.org/wiki/LEB128
      # This is also what protobuf uses: https://protobuf.dev/programming-guides/encoding/#varints
      def load_varint
        n = io.getbyte
        if n < 128
          n
        else
          n -= 128
          shift = 0
          while (b = io.getbyte) >= 128
            n += (b - 128) << (shift += 7)
          end
          n + (b << (shift + 7))
        end
      end

      def load_serialized_length
        io.read(4).unpack1("L")
      end

      def load_optional_node
        if io.getbyte != 0
          io.pos -= 1
          load_node
        end
      end

      def load_string
        io.read(load_varint).force_encoding(encoding)
      end

      def load_location
        Location.new(source, load_varint, load_varint)
      end

      def load_optional_location
        load_location if io.getbyte != 0
      end

      def load_constant
        index = load_varint - 1
        constant = constant_pool[index]

        unless constant
          offset = constant_pool_offset + index * 8

          if RUBY_VERSION >= "3.1"
            start = serialized.unpack1("L", offset: offset)
            length = serialized.unpack1("L", offset: offset + 4)
          else
            start = serialized[offset..].unpack1("L")
            length = serialized[offset+4..].unpack1("L")
          end

          constant = input.byteslice(start, length).to_sym
          constant_pool[index] = constant
        end

        constant
      end

      def load_node
        type = io.getbyte
        location = load_location

        case type
        <%- nodes.each_with_index do |node, index| -%>
        when <%= index + 1 %> then
          <%- if node.needs_serialized_length? -%>
          load_serialized_length
          <%- end -%>
          <%= node.name %>.new(<%= (node.params.map { |param|
            case param
            when NodeParam then "load_node"
            when OptionalNodeParam then "load_optional_node"
            when StringParam then "load_string"
            when NodeListParam then "Array.new(load_varint) { load_node }"
            when LocationListParam then "Array.new(load_varint) { load_location }"
            when ConstantParam then "load_constant"
            when ConstantListParam then "Array.new(load_varint) { load_constant }"
            when LocationParam then "load_location"
            when OptionalLocationParam then "load_optional_location"
            when UInt32Param then "load_varint"
            else raise
            end
          } + ["location"]).join(", ") -%>)
          <%- end -%>
        end
      end
    end
  end
end
