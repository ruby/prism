<%- string_type = Prism::JAVA_STRING_TYPE -%>
package org.prism;

import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Arrays;

// GENERATED BY <%= File.basename(__FILE__) %>
// @formatter:off
public abstract class Nodes {

    public static final byte[][] EMPTY_BYTE_ARRAY_ARRAY = {};
    public static final <%= string_type %>[] EMPTY_STRING_ARRAY = {};

    public static final class Location {

        public static final Location[] EMPTY_ARRAY = {};

        public final int startOffset;
        public final int length;

        public Location(int startOffset, int length) {
            this.startOffset = startOffset;
            this.length = length;
        }

        public int endOffset() {
            return startOffset + length;
        }
    }

    public static final class Source {
        public final byte[] bytes;
        private int startLine;
        private final int[] lineOffsets;

        public Source(byte[] bytes) {
            this(bytes, 1, computeLineOffsets(bytes));
        }

        public Source(byte[] bytes, int startLine, int[] lineOffsets) {
            assert lineOffsets[0] == 0;
            this.bytes = bytes;
            this.startLine = startLine;
            this.lineOffsets = lineOffsets;
        }

        public void setStartLine(int startLine) {
            this.startLine = startLine;
        }

        public static int[] computeLineOffsets(byte[] bytes) {
            int[] lineOffsets = new int[8];
            int lineOffsetsSize = 0;
            lineOffsets[lineOffsetsSize++] = 0;

            for (int i = 0; i < bytes.length; i++) {
                if (bytes[i] == '\n') {
                    if (lineOffsetsSize == lineOffsets.length) {
                        lineOffsets = Arrays.copyOf(lineOffsets, lineOffsets.length * 2);
                    }
                    lineOffsets[lineOffsetsSize++] = i + 1;
                }
            }
            return Arrays.copyOf(lineOffsets, lineOffsetsSize);
        }

        // 1-based
        public int line(int byteOffset) {
            return startLine + findLine(byteOffset);
        }

        // 0-based
        public int findLine(int byteOffset) {
            if (byteOffset >= bytes.length) byteOffset = bytes.length - 1;
            assert byteOffset >= 0 : byteOffset;
            int index = Arrays.binarySearch(lineOffsets, byteOffset);
            int line;
            if (index < 0) {
                line = -index - 2;
            } else {
                line = index;
            }
            assert line >= 0 && line <= getLineCount() : line;
            return line;
        }

        public int getLineCount() {
            return lineOffsets.length;
        }
    }

    public static abstract class Node {

        public static final Node[] EMPTY_ARRAY = {};

        public final int startOffset;
        public final int length;
        private boolean newLineFlag = false;

        public Node(int startOffset, int length) {
            this.startOffset = startOffset;
            this.length = length;
        }

        public final int endOffset() {
            return startOffset + length;
        }

        public final boolean hasNewLineFlag() {
            return newLineFlag;
        }

        public void setNewLineFlag(Source source, boolean[] newlineMarked) {
            int line = source.findLine(this.startOffset);
            if (!newlineMarked[line]) {
                newlineMarked[line] = true;
                this.newLineFlag = true;
            }
        }

        public void setNewLineFlag(boolean newLineFlag) {
            this.newLineFlag = newLineFlag;
        }

        public abstract <T> T accept(AbstractNodeVisitor<T> visitor);

        public abstract <T> void visitChildNodes(AbstractNodeVisitor<T> visitor);

        public abstract Node[] childNodes();

        @Override
        public String toString() {
            return toString("");
        }

        protected abstract String toString(String indent);
    }
<%# FLAGS -%>
    <%- flags.each do |group| -%>

    /**
     * <%= group.comment %>
     */
    public static final class <%= group.name %> implements Comparable<<%= group.name %>> {
        <%- group.values.each_with_index do |value, index| -%>

        // <%= value.comment %>
        public static final short <%= value.name %> = 1 << <%= index %>;
        <%- end -%>

        <%- group.values.each do |value| -%>
        public static boolean is<%= value.camelcase %>(short flags) {
            return (flags & <%= value.name %>) != 0;
        }

        <%- end -%>
        private final short flags;

        public <%= group.name %>(short flags) {
            this.flags = flags;
        }

        @Override
        public int hashCode() {
            return flags;
        }

        @Override
        public boolean equals(Object other) {
            if (!(other instanceof <%= group.name %>)) {
                return false;
            }

            return flags == ((<%= group.name %>) other).flags;
        }

        @Override
        public int compareTo(<%= group.name %> other) {
            return flags - other.flags;
        }

        <%- group.values.each do |value| -%>
        public boolean is<%= value.camelcase %>() {
            return (flags & <%= value.name %>) != 0;
        }

        <%- end -%>
    }
<%- end -%>
<%# NODES -%>
    <%- nodes.each do |node| -%>

    /**
    <%- node.each_comment_line do |line| -%>
     *<%= line %>
    <%- end -%>
     */
    public static final class <%= node.name -%> extends Node {
        <%- if node.needs_serialized_length? -%>
        public final int serializedLength;
        <%- end -%>
        <%- node.semantic_fields.each do |field| -%>
        <%- if field.class.name.include?('Optional') -%>
        /** optional (can be null) */
        <%- end -%>
        public final <%= field.java_type %> <%= field.name %>;
        <%- end -%>

        <%-
          params = node.needs_serialized_length? ? ["int serializedLength"] : []
          params.concat node.semantic_fields.map { |field| "#{field.java_type} #{field.name}" }
          params.concat ["int startOffset", "int length"]
        -%>
        public <%=node.name -%>(<%= params.join(", ") %>) {
            super(startOffset, length);
        <%- if node.needs_serialized_length? -%>
            this.serializedLength = serializedLength;
        <%- end -%>
        <%- node.semantic_fields.each do |field| -%>
            this.<%= field.name %> = <%= field.name %>;
        <%- end -%>
        }
        <%# methods for flags -%>
        <%- node.semantic_fields.grep(Prism::FlagsField).each do |field| -%>
        <%- flags.find { |flag| flag.name == field.kind }.tap { |flag| raise "Expected to find #{field.kind}" unless flag }.values.each do |value| -%>

        public boolean is<%= value.camelcase %>() {
            return <%= field.kind %>.is<%= value.camelcase %>(this.<%= field.name %>);
        }
        <%- end -%>
        <%- end -%>
        <%# potential override of setNewLineFlag() -%>
        <%- if node.newline == false -%>

        @Override
        public void setNewLineFlag(Source source, boolean[] newlineMarked) {
            // Never mark <%= node.name %> with a newline flag, mark children instead
        }
        <%- elsif node.newline.is_a?(String) -%>

        @Override
        public void setNewLineFlag(Source source, boolean[] newlineMarked) {
          <%- field = node.semantic_fields.find { |f| f.name == node.newline } or raise node.newline -%>
          <%- case field -%>
          <%- when Prism::NodeField -%>
            this.<%= field.name %>.setNewLineFlag(source, newlineMarked);
          <%- when Prism::NodeListField -%>
            Node first = this.<%= field.name %>.length > 0 ? this.<%= field.name %>[0] : null;
            if (first != null) {
                first.setNewLineFlag(source, newlineMarked);
            }
          <%- else raise field.class.name -%>
          <%- end -%>
        }
        <%- end -%>

        public <T> void visitChildNodes(AbstractNodeVisitor<T> visitor) {
          <%- node.semantic_fields.each do |field| -%>
            <%- case field -%>
            <%- when Prism::NodeListField -%>
            for (Nodes.Node child : this.<%= field.name %>) {
                child.accept(visitor);
            }
            <%- when Prism::NodeField -%>
            this.<%= field.name %>.accept(visitor);
            <%- when Prism::OptionalNodeField -%>
            if (this.<%= field.name %> != null) {
                this.<%= field.name %>.accept(visitor);
            }
            <%- end -%>
          <%- end -%>
        }

        public Node[] childNodes() {
          <%- if node.semantic_fields.none?(Prism::NodeListField) and node.semantic_fields.none?(Prism::NodeKindField) -%>
            return EMPTY_ARRAY;
          <%- elsif node.semantic_fields.one?(Prism::NodeListField) and node.semantic_fields.none?(Prism::NodeKindField) -%>
            return this.<%= node.semantic_fields.grep(Prism::NodeListField).first.name %>;
          <%- elsif node.semantic_fields.none?(Prism::NodeListField) -%>
            return new Node[] { <%= node.semantic_fields.grep(Prism::NodeKindField).map { |field| "this.#{field.name}" }.join(', ') %> };
          <%- else -%>
            ArrayList<Node> childNodes = new ArrayList<>();
            <%- node.semantic_fields.each do |field| -%>
              <%- case field -%>
              <%- when Prism::NodeField, Prism::OptionalNodeField -%>
            childNodes.add(this.<%= field.name %>);
              <%- when Prism::NodeListField -%>
            childNodes.addAll(Arrays.asList(this.<%= field.name %>));
              <%- end -%>
            <%- end -%>
            return childNodes.toArray(EMPTY_ARRAY);
          <%- end -%>
        }

        public <T> T accept(AbstractNodeVisitor<T> visitor) {
            return visitor.visit<%= node.name -%>(this);
        }

        @Override
        protected String toString(String indent) {
            StringBuilder builder = new StringBuilder();
            builder.append(this.getClass().getSimpleName());
            if (hasNewLineFlag()) {
                builder.append("[Li]");
            }
            builder.append('\n');
            String nextIndent = indent + "  ";
            <%- if node.fields.any?(Prism::NodeListField) or node.fields.any?(Prism::ConstantListField) -%>
            String nextNextIndent = nextIndent + "  ";
            <%- end -%>
            <%- node.fields.grep_v(Prism::LocationField).grep_v(Prism::OptionalLocationField).each do |field| -%>
            builder.append(nextIndent);
            builder.append("<%= field.name %>: ");
            <%- case field -%>
            <%- when Prism::NodeField -%>
            builder.append(this.<%= field.name %>.toString(nextIndent));
            <%- when Prism::OptionalNodeField -%>
            builder.append(this.<%= field.name %> == null ? "null\n" : this.<%= field.name %>.toString(nextIndent));
            <%- when Prism::NodeListField -%>
            builder.append('\n');
            for (Node child : this.<%= field.name %>) {
                builder.append(nextNextIndent).append(child.toString(nextNextIndent));
            }
            <%- when Prism::StringField -%>
            builder.append('"' + new String(this.<%= field.name %>, StandardCharsets.UTF_8) + '"');
            builder.append('\n');
            <%- when Prism::ConstantField -%>
            builder.append('"').append(this.<%= field.name %>).append('"');
            builder.append('\n');
            <%- when Prism::OptionalConstantField -%>
            builder.append(this.<%= field.name %> == null ? "null" : "\"" + this.<%= field.name %> + "\"");
            builder.append('\n');
            <%- when Prism::ConstantListField -%>
            builder.append('\n');
            for (<%= string_type %> constant : this.<%= field.name %>) {
                builder.append(nextNextIndent).append('"').append(constant).append('"').append('\n');
            }
            <%- when Prism::UInt32Field, Prism::FlagsField -%>
            builder.append(this.<%= field.name %>);
            builder.append('\n');
            <%- else -%>
            <%- raise field.class.name -%>
            <%- end -%>
            <%- end -%>
            return builder.toString();
        }
    }
    <%- end -%>

}
// @formatter:on
